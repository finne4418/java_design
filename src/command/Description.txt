・Commandデザインパターン

目的
    複雑な内容のリクエストを送れるようにしたい

効果
    リクエストの処理自体をオブジェクト化することで、どんなに複雑な
    内容のリクエストでも送れるし、リクエストの種類を好きなように増やすこともできる。

背景
    あるオブジェクトに対してリクエストを送るとは、すなわち、そのオブジェクトのメソッドを
    呼び出すことです。
    そのリクエストの内容（どんなことをオブジェクトに実行してほしいのか）はそれを表す
    引数によってメソッドに渡されるのが最も典型的な方法です。
    ところが、リクエスト内容が１つや２つの引数では表現できない複雑なものである
    （例えば条件分岐があるなど）場合は、引数の種類を増やしていけば何とか受け付ける
    ことができるようにはなりますが、どうしても限界があります。

    単純な例で説明しましょう。

    次のstep1.MyServerクラスは、serviceA, serviceB, serviceCという３つのメソッドを持っているものとします。

    この３つのメソッドをいろんな順番で呼んでもらおうと考えます。
    すると、クライアントプログラムは次のstep1.Clientクラスのようになるでしょう。

    しかし、これではいちいちメソッド呼び出しを記述しなければならないので、
    複数のクライアントプログラムがみな同じような手順でMyServiceオブジェクトを使いたいという場合に不便です。
    そこで、引数１つで各メソッドの呼び出し順を指定できるようにstep2.MyServiceクラスのように考えます。

    こうしておけば、クライアントプログラムでは１つのメソッドrequest(int methodPattern)の引数に
    １つの値をセットするだけで、何通りもの呼び出し順を指定することができるようになります。
    しかし、メソッドの呼び出し順（すなわちリクエストの内容）の種類はMyServiceクラスのメソッドの
    全組み合わせに至るまで増える可能性がありますし、単に順番を入れ替えるだけでなく、
    条件判定によって呼び方を変えるなどというリクエストも増えるかもしれませんから、
    リクエストの種類が増えるたびにMyServiceクラスを修正することを想像すると、あまり現実的な方法ではないでしょう。

Commandデザインパターンを使うと・・・

    そこで、リクエストの内容をint値１つで表すような単純な方法をやめ、リクエスト全体を１つのオブジェクト、
    すなわち「コマンド(Command)オブジェクト」に含ませて、まるごと引数に渡すようにすることを考えます。

    渡された側(すなわちハンドラオブジェクト)では、コマンドオブジェクトのメソッドを呼び返すことによって
    リクエストを処理します。
    こうすると、リクエスト内容の詳細をコマンドオブジェクト内にまとめて記述することができるため、
    どんなに複雑なリクエストでもハンドラに渡すことが可能になります。
    これを「Commandデザインパターン」といいます。

    このパターンを別の言い方で表せば、「リクエストの内容をコマンドオブジェクトにカプセル化する」
    パターンともいえます。

    コマンドパターンを使えばさらに、コマンドオブジェクトの種類を増やすことで簡単にリクエストの種類を増やす
    こともできますし、全コマンドオブジェクトに共通のインターフェースを持たせることによって、ハンドラクラス
    のコードを修正することなくリクエストの種類を増やすことも可能になります。

    また、個々のリクエストをトランザクションとして管理したい場合にも、コマンドオブジェクトを使うことによって、
    リクエストをキューに蓄積したり、処理済みのリクエストをロールバックしたりする処理もハンドラの
    コードを複雑にすることなく実現することが可能になります。

    サンプルプログラムではMyRequestクラスというコマンドクラスを作っています。
    MyRequestは、先ほどの例で使ったハンドラクラスMyServiceに対して送られるリクエストを実現します。
    また、コマンドクラスとしてはMyRequestクラスのサブクラスとしてMyRequest1とMyRequest2という2種類の
    クラスを用意し、クライアントプログラムは所望のクラスを選んで使うことで、２種類のリクエストを生成して
    処理してもらうことができるというわけです。

    サンプルプログラムはstep3パッケージに入っています。

    exampleクラスは「serviceA() -> serviceB()」という呼び出し順をリクエストするために、
    MyRequest1オブジェクトを生成して使っている例です。